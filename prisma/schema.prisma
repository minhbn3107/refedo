// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  role               UserRole  @default(USER)
  accounts           Account[]
  isTwoFactorEnabled Boolean   @default(false)
  // twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// model TwoFactorConfirmation {
//   id String @id @default(cuid())

//   userId String
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([userId])
// }

model UploadDocument {
  id           String             @id @default(uuid())
  name         String
  fileUrl      String
  userId       String
  type         Boolean            @default(true)
  dateCreated  DateTime           @default(now())
  dateModified DateTime           @default(now())
  courses      CourseOnDocument[]

  @@unique([name, userId])
}

model Course {
  id              String             @id @default(uuid())
  name            String
  tags            String[]
  description     String?
  userId          String
  type            Boolean            @default(true)
  dateCreated     DateTime           @default(now())
  dateModified    DateTime           @default(now())
  uploadDocuments CourseOnDocument[]

  @@unique([name, userId])
}

model CourseOnDocument {
  uploadDocument   UploadDocument @relation(fields: [uploadDocumentId], references: [id])
  uploadDocumentId String
  course           Course         @relation(fields: [courseId], references: [id])
  courseId         String

  @@id([uploadDocumentId, courseId])
}
